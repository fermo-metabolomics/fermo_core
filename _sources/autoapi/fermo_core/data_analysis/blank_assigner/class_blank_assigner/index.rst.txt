fermo_core.data_analysis.blank_assigner.class_blank_assigner
============================================================

.. py:module:: fermo_core.data_analysis.blank_assigner.class_blank_assigner

.. autoapi-nested-parse::

   Organize the calling of data analysis modules.

   Copyright (c) 2022 to present Mitja Maximilian Zdouc, PhD

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.



Attributes
----------

.. autoapisummary::

   fermo_core.data_analysis.blank_assigner.class_blank_assigner.logger


Classes
-------

.. autoapisummary::

   fermo_core.data_analysis.blank_assigner.class_blank_assigner.BlankAssigner


Module Contents
---------------

.. py:data:: logger

.. py:class:: BlankAssigner(**data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Pydantic-based class for performing blank assignment analysis

   Attributes:
       params: ParameterManager object, holds user-provided parameters
       stats: Stats object, holds stats on molecular features and samples
       features: Repository object, holds "General Feature" objects


   .. py:attribute:: params
      :type:  fermo_core.input_output.class_parameter_manager.ParameterManager


   .. py:attribute:: stats
      :type:  fermo_core.data_processing.class_stats.Stats


   .. py:attribute:: features
      :type:  fermo_core.data_processing.class_repository.Repository


   .. py:method:: return_attrs() -> tuple[fermo_core.data_processing.class_stats.Stats, fermo_core.data_processing.class_repository.Repository]

      Returns modified attributes to the calling function

      Returns:
          Tuple containing modified Stats and Feature Repository objects.



   .. py:method:: calc_rprsnt(vals: list) -> float

      Calculate representative value from list using user-specified algorithm

      Arguments:
          vals: a list of int values representing height or area

      Returns:
          The determined representative value

      Raises:
          RuntimeError: unexpected algorithm



   .. py:method:: collect_area(f_id: int) -> tuple[list, list]

      Collect area for nonblanks vs blanks

      Returns:
          A tuple of [values from nonblanks] and [values from blanks]

      Raises:
          RuntimeError: one of blanks or non-blanks is empty



   .. py:method:: collect_height(f_id: int) -> tuple[list, list]

      Collect height for nonblanks vs blanks

      Returns:
          A tuple of [values from nonblanks] and [values from blanks]

      Raises:
          RuntimeError: one of blanks or non-blanks is empty



   .. py:method:: determine_blank()

      Determine blank/nonblank status of features based on presence in samples



   .. py:method:: validate_assignment()

      Validate if assignment has been performed properly

      Raises:
          RuntimeError



   .. py:method:: run_analysis()

      Run blank assignment analysis



