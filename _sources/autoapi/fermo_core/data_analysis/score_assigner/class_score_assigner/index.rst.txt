fermo_core.data_analysis.score_assigner.class_score_assigner
============================================================

.. py:module:: fermo_core.data_analysis.score_assigner.class_score_assigner

.. autoapi-nested-parse::

   Assign scores for Feature and Sample object instances.

   Copyright (c) 2022 to present Mitja Maximilian Zdouc, PhD

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.



Attributes
----------

.. autoapisummary::

   fermo_core.data_analysis.score_assigner.class_score_assigner.logger


Classes
-------

.. autoapisummary::

   fermo_core.data_analysis.score_assigner.class_score_assigner.ScoreAssigner


Module Contents
---------------

.. py:data:: logger

.. py:class:: ScoreAssigner(**data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Pydantic-based class to organize assignment of scores to Features and Samples

   Attributes:
       params: ParameterManager object, holds user-provided parameters
       stats: Stats object, holds stats on molecular features and samples
       features: Repository object, holds "General Feature" objects
       samples: Repository object, holds "Sample" objects
       networks: intermediate storage of sample:set of network ids


   .. py:attribute:: params
      :type:  fermo_core.input_output.class_parameter_manager.ParameterManager


   .. py:attribute:: stats
      :type:  fermo_core.data_processing.class_stats.Stats


   .. py:attribute:: features
      :type:  fermo_core.data_processing.class_repository.Repository


   .. py:attribute:: samples
      :type:  fermo_core.data_processing.class_repository.Repository


   .. py:attribute:: networks
      :type:  dict


   .. py:method:: return_attributes() -> tuple[fermo_core.data_processing.class_repository.Repository, fermo_core.data_processing.class_repository.Repository]

      Returns modified attributes to the calling function

      Returns:
          Tuple containing Feature Repository and Sample Repository objects.



   .. py:method:: assign_feature_scores()

      Assign scores to feature objects



   .. py:method:: collect_sample_spec_networks()

      Collect sample:set of network ids for each used algorithm

      Raises:
          RuntimeError: no networks detected



   .. py:method:: assign_sample_scores()

      Assign scores to sample objects



   .. py:method:: run_analysis()

      Run analysis steps to assign scores to Feature and Sample instances.



