fermo_core.data_analysis.annotation_manager.class_mzmine_ann_parser
===================================================================

.. py:module:: fermo_core.data_analysis.annotation_manager.class_mzmine_ann_parser

.. autoapi-nested-parse::

   Retrieves optional annotations from mzmine peaktable

   Copyright (c) 2022-present Mitja Maximilian Zdouc, PhD

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.



Attributes
----------

.. autoapisummary::

   fermo_core.data_analysis.annotation_manager.class_mzmine_ann_parser.logger


Classes
-------

.. autoapisummary::

   fermo_core.data_analysis.annotation_manager.class_mzmine_ann_parser.MzmineAnnParser


Module Contents
---------------

.. py:data:: logger

.. py:class:: MzmineAnnParser(**data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Retrieves optional annotations from mzmine peaktable file

   Attributes:
       params: ParameterManager object, holds user-provided parameters
       stats: Stats object, holds info on currently active features (not filtered out)
       features: Repository object, holds "General Feature" objects
       accepted: parsed columns


   .. py:attribute:: params
      :type:  fermo_core.input_output.class_parameter_manager.ParameterManager


   .. py:attribute:: stats
      :type:  fermo_core.data_processing.class_stats.Stats


   .. py:attribute:: features
      :type:  fermo_core.data_processing.class_repository.Repository


   .. py:attribute:: f
      :type:  fermo_core.data_processing.builder_feature.dataclass_feature.Feature


   .. py:attribute:: accepted
      :type:  tuple
      :value: ('ion_identities:ion_identities', 'spectral_db_matches:spectral_db_matches')



   .. py:method:: return_attributes() -> fermo_core.data_processing.class_repository.Repository

      Returns modified attributes

      Returns:
          Modified Feature object



   .. py:method:: run() -> None

      Orchestrate functions



   .. py:method:: contains_values(r: pandas.Series) -> bool

      Check if any value is not NaN

      Args:
          r: a mzmine peaktable row



   .. py:method:: parse_ion_ident(r: pandas.Series, df: pandas.DataFrame) -> None

      Retrieve ion identity information

      Args:
          r: a mzmine peaktable row
          df: the full dataframe for reference



   .. py:method:: parse_spectral_db(r: pandas.Series) -> None

      Retrieve spectral db annotation information

      Args:
          r: a mzmine peaktable row



