fermo_core.data_analysis.annotation_manager.class_ms2deepscore_annotator
========================================================================

.. py:module:: fermo_core.data_analysis.annotation_manager.class_ms2deepscore_annotator

.. autoapi-nested-parse::

   Runs the ms2deepscore library annotation module.

   Copyright (c) 2024 to present Mitja Maximilian Zdouc, PhD

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.



Attributes
----------

.. autoapisummary::

   fermo_core.data_analysis.annotation_manager.class_ms2deepscore_annotator.logger


Classes
-------

.. autoapisummary::

   fermo_core.data_analysis.annotation_manager.class_ms2deepscore_annotator.Ms2deepscoreAnnotator


Module Contents
---------------

.. py:data:: logger

.. py:class:: Ms2deepscoreAnnotator(**data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Pydantic-based class to organize calling and logging of ms2deepscore lib matching

   Attributes:
       features: Repository object, holds "General Feature" objects
       active_features: a set of active features
       polarity: the ion mode polarity
       library: a list of Spectrum object representing the library to match against
       library_name: the name of the library that is matched against
       queries: a list of Spectra for which to perform matching
       scores: a matchms.Scores object storing the raw results of the matching
       score_cutoff: minimum score for a match
       max_precursor_mass_diff: maximum precursor mass difference


   .. py:attribute:: features
      :type:  fermo_core.data_processing.class_repository.Repository


   .. py:attribute:: active_features
      :type:  set


   .. py:attribute:: polarity
      :type:  str


   .. py:attribute:: library
      :type:  list


   .. py:attribute:: library_name
      :type:  str


   .. py:attribute:: queries
      :type:  Optional[list]
      :value: None



   .. py:attribute:: scores
      :type:  Optional[Any]
      :value: None



   .. py:attribute:: score_cutoff
      :type:  float


   .. py:attribute:: max_precursor_mass_diff
      :type:  float


   .. py:method:: return_features() -> fermo_core.data_processing.class_repository.Repository

      Return the modified Feature objects as Repository object

      Returns:
          A Repository object with modified Feature objects



   .. py:method:: prepare_queries()

      Prepare a filtered list of query spectra for matching

      Raise:
          RuntimeError: no query spectra collected (empty list)



   .. py:method:: calculate_scores_ms2deepscore()

      Calculate matchms scores using ms2deepscore algorithm

      Raises:
          RuntimeError: fatal error preventing successful execution of module - abort



   .. py:method:: filter_match(match: tuple, f_mz: float) -> bool

      Filter ms2deepscore-derived matches for user-specified params

      Arguments:
          match: a tuple of (matchms.Spectrum, score)
          f_mz: the m/z of the matched feature

      Returns:
          A bool indicating if match is inside the settings (True) or not (False)



   .. py:method:: extract_userlib_scores()

      Extract best matches against user library

      This method must only be called for extracting matches resulting from hits
      against a user-provided library.

      Raises:
          RuntimeError: 'self.scores' None - no scores calculated



   .. py:method:: extract_mibig_scores(kcb_results: dict)

      Extract matches against targeted mibig library, incorporate KCB results

      Attributes:
          kcb_results: A dict containing the knownclusterblast results

      Raises:
          RuntimeError: 'self.scores' None - no scores calculated



