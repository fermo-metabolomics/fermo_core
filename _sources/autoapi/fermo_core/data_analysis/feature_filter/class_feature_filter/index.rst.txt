fermo_core.data_analysis.feature_filter.class_feature_filter
============================================================

.. py:module:: fermo_core.data_analysis.feature_filter.class_feature_filter

.. autoapi-nested-parse::

   Class to manage methods to filter features for various parameters.

   Copyright (c) 2022 to present Mitja Maximilian Zdouc, PhD

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.



Attributes
----------

.. autoapisummary::

   fermo_core.data_analysis.feature_filter.class_feature_filter.logger


Classes
-------

.. autoapisummary::

   fermo_core.data_analysis.feature_filter.class_feature_filter.FeatureFilter


Module Contents
---------------

.. py:data:: logger

.. py:class:: FeatureFilter(**data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Pydantic-based class to organize molecular feature filtering methods.

   Attributes:
       params: holds user-provided parameters
       stats: general information about analysis run
       features: holds Feature objects
       samples: holds Sample objects

   Notes:
       Should be called as first step in data analysis


   .. py:attribute:: params
      :type:  fermo_core.input_output.class_parameter_manager.ParameterManager


   .. py:attribute:: stats
      :type:  fermo_core.data_processing.class_stats.Stats


   .. py:attribute:: features
      :type:  fermo_core.data_processing.class_repository.Repository


   .. py:attribute:: samples
      :type:  fermo_core.data_processing.class_repository.Repository


   .. py:method:: return_values() -> tuple[fermo_core.data_processing.class_stats.Stats, fermo_core.data_processing.class_repository.Repository, fermo_core.data_processing.class_repository.Repository]

      Returns modified attributes for further processing.

      Returns:
          Tuple containing Stats, Feature Repository and Sample Repository objects.



   .. py:method:: filter()

      Call feature filtering methods dependent on given parameters.



   .. py:method:: remove_filtered_features()

      Remove features that have been filtered out due to the given settings



   .. py:method:: filter_rel_int_range()

      Retain features inside relative intensity range in at least one sample.



   .. py:method:: filter_rel_area_range()

      Retain features inside relative area range in at least one sample.



   .. py:method:: filter_features_for_range(r_list: list, param: str) -> set

      Determine features with values outside of given range

      Arguments:
          r_list: a list of two floats indicating the range
          param: the parameter to check against range

      Returns:
          A set of features that have no occurrences in "inside range" (not in any
          sample).



