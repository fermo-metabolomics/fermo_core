fermo_core.data_analysis.phenotype_manager.class_phen_quant_ass
===============================================================

.. py:module:: fermo_core.data_analysis.phenotype_manager.class_phen_quant_ass

.. autoapi-nested-parse::

   Run the phenotype quantitative percentage data assignment.
   Copyright (c) 2022 to present Mitja Maximilian Zdouc, PhD
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:
   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.



Attributes
----------

.. autoapisummary::

   fermo_core.data_analysis.phenotype_manager.class_phen_quant_ass.logger


Classes
-------

.. autoapisummary::

   fermo_core.data_analysis.phenotype_manager.class_phen_quant_ass.PhenQuantAss


Module Contents
---------------

.. py:data:: logger

.. py:class:: PhenQuantAss(**data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Pydantic-based class to run qualitative phenotype assignment

   Attributes:
       coeff_cutoff: the correlation coefficient cutoff
       p_val_cutoff: the corrected p-value cutoff
       fdr_corr: the type of FDR correction
       mode: the type of quantitative data
       stats: Stats object, holds stats on molecular features and samples
       features: Repository object, holds "General Feature" objects
       samples: Repository object holding Sample objects
       relevant_f_ids: features detected in > 3 samples
       assays: a dict of dicts containing correlations and p-values per feature for later assignment


   .. py:attribute:: coeff_cutoff
      :type:  float


   .. py:attribute:: p_val_cutoff
      :type:  float


   .. py:attribute:: fdr_corr
      :type:  str


   .. py:attribute:: mode
      :type:  str


   .. py:attribute:: stats
      :type:  fermo_core.data_processing.class_stats.Stats


   .. py:attribute:: features
      :type:  fermo_core.data_processing.class_repository.Repository


   .. py:attribute:: samples
      :type:  fermo_core.data_processing.class_repository.Repository


   .. py:attribute:: relevant_f_ids
      :type:  set


   .. py:attribute:: assays
      :type:  dict


   .. py:method:: return_values() -> tuple[fermo_core.data_processing.class_stats.Stats, fermo_core.data_processing.class_repository.Repository]

      Return the modified objects to the calling function

      Returns:
          The modified Stats and Repository objects



   .. py:method:: run_analysis()

      Run the phenotype annotation analysis

      Raise:
          RuntimeError: self.stats.phenotypes not assigned



   .. py:method:: add_annotation_attribute(feature: fermo_core.data_processing.builder_feature.dataclass_feature.Feature) -> fermo_core.data_processing.builder_feature.dataclass_feature.Feature
      :staticmethod:


      Add annotation attribute to feature if not existing

      Arguments:
          feature: the Feature object to modify

      Returns:
          The modified feature object



   .. py:method:: find_relevant_f_ids()

      Determines features detected in > 3 samples

      Raises:
          RuntimeError: No relevant features (present in >3 samples) detected.



   .. py:method:: valid_constant(values: list) -> bool
      :staticmethod:


      Check for uniform values

      Cannot perform Pearson corr on constant values

      Args:
          values: the measured values (areas, activities)

      Returns:
          A bool indicating outcome of validation



   .. py:method:: pearson_percentage(areas: list, activs: list) -> tuple[float, float]
      :staticmethod:


      Calculate regular pearson coefficient

      Args:
          areas: the feature areas per sample
          activs: the measured activities per sample

      Returns:
          the pearson score and the p-value



   .. py:method:: pearson_concentration(areas: list, activs: list) -> tuple[float, float]
      :staticmethod:


      Calculate regular pearson coefficient

      Args:
          areas: the feature areas per sample
          activs: the measured activities per sample

      Returns:
          the pearson score and the p-value



   .. py:method:: calculate_correlation()

      Collect data and prepare calculation

      Raises:
          KeyError: unsupported type of input data



   .. py:method:: correct_p_val() -> None

      Correct the calculated p-values with a user-defined algorithm



   .. py:method:: assign_results() -> None

      Assign the results to the feature repository



