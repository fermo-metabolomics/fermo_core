fermo_core.data_analysis.phenotype_manager.class_phen_qual_assigner
===================================================================

.. py:module:: fermo_core.data_analysis.phenotype_manager.class_phen_qual_assigner

.. autoapi-nested-parse::

   Run the phenotype qualitative data assignment.

   Copyright (c) 2022 to present Mitja Maximilian Zdouc, PhD

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.



Attributes
----------

.. autoapisummary::

   fermo_core.data_analysis.phenotype_manager.class_phen_qual_assigner.logger


Classes
-------

.. autoapisummary::

   fermo_core.data_analysis.phenotype_manager.class_phen_qual_assigner.PhenQualAssigner


Module Contents
---------------

.. py:data:: logger

.. py:class:: PhenQualAssigner(**data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Pydantic-based class to run qualitative phenotype assignment

   Attributes:
       params: ParameterManager object, holds user-provided parameters
       stats: Stats object, holds stats on molecular features and samples
       features: Repository object, holds "General Feature" objects
       samples: Repository object holding Sample objects
       f_ids_intersect: the intersection of positive and negative feature IDs


   .. py:attribute:: params
      :type:  fermo_core.input_output.class_parameter_manager.ParameterManager


   .. py:attribute:: stats
      :type:  fermo_core.data_processing.class_stats.Stats


   .. py:attribute:: features
      :type:  fermo_core.data_processing.class_repository.Repository


   .. py:attribute:: samples
      :type:  fermo_core.data_processing.class_repository.Repository


   .. py:attribute:: f_ids_intersect
      :type:  Optional[set]
      :value: None



   .. py:method:: return_values() -> tuple[fermo_core.data_processing.class_stats.Stats, fermo_core.data_processing.class_repository.Repository]

      Return the modified objects to the calling function

      Returns:
          The modified Stats and Repository objects



   .. py:method:: add_annotation_attribute(feature: fermo_core.data_processing.builder_feature.dataclass_feature.Feature) -> fermo_core.data_processing.builder_feature.dataclass_feature.Feature
      :staticmethod:


      Add annotation attribute to feature if not existing

      Arguments:
          feature: the Feature object to modify

      Returns:
          The modified feature object



   .. py:method:: collect_sets()

      Collect sets of active and inactive features and assign actives



   .. py:method:: get_value(f_id: int, sample_ids: set) -> list

      Retrieve values based on area or height

      Arguments:
          f_id: a feature ID
          sample_ids: the sample Ids to retrieve

      Returns:
          A list of collected values

      Raises:
          RuntimeError: empty list detected - no values determined



   .. py:method:: bin_intersection()

      Bin the intersection between positive and negative f_ids based on factor

      Raises:
          RuntimeError: unsupported algorithm



   .. py:method:: run_analysis()

      Run the phenotype annotation analysis

      Raise:
          RuntimeError: self.stats.phenotypes not specified



