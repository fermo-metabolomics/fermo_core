fermo_core.data_processing.builder_sample.dataclass_sample
==========================================================

.. py:module:: fermo_core.data_processing.builder_sample.dataclass_sample

.. autoapi-nested-parse::

   Organize data of sample-specific information.

   Copyright (c) 2022-2023 Mitja Maximilian Zdouc, PhD

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.



Attributes
----------

.. autoapisummary::

   fermo_core.data_processing.builder_sample.dataclass_sample.logger


Classes
-------

.. autoapisummary::

   fermo_core.data_processing.builder_sample.dataclass_sample.Scores
   fermo_core.data_processing.builder_sample.dataclass_sample.Sample


Module Contents
---------------

.. py:data:: logger

.. py:class:: Scores(**data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Organize sample-specific data, including sample-specific mol feature info.

   Attributes:
       diversity: indicates the est chemical diversity in this sample vs all samples
       specificity: indicates the unique chemistry compared to other samples
       mean_novelty: indicates the mean novelty of all features in sample


   .. py:attribute:: diversity
      :type:  Optional[float]
      :value: None



   .. py:attribute:: specificity
      :type:  Optional[float]
      :value: None



   .. py:attribute:: mean_novelty
      :type:  Optional[float]
      :value: None



   .. py:method:: to_json()


.. py:class:: Sample(**data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Organize sample-specific data, including sample-specific mol feature info.

   Attributes:
       s_id: string identifier of sample
       features: dict of features objects with sample-specific information.
       feature_ids: set of feature ids included in sample
       networks: for each network algorithm, a set of subnetwork ids found in sample
       max_intensity: the highest intensity of a feature in the sample (absolute)
       max_area: the highest area of a feature in the sample (absolute)
       Scores: a Scores object summarizing scores calculated for sample


   .. py:attribute:: s_id
      :type:  Optional[str]
      :value: None



   .. py:attribute:: features
      :type:  Optional[dict]
      :value: None



   .. py:attribute:: feature_ids
      :type:  Optional[set]
      :value: None



   .. py:attribute:: networks
      :type:  Optional[dict]
      :value: None



   .. py:attribute:: max_intensity
      :type:  Optional[float]
      :value: None



   .. py:attribute:: max_area
      :type:  Optional[float]
      :value: None



   .. py:attribute:: Scores
      :type:  Optional[Sample.Scores]
      :value: None



   .. py:method:: to_json() -> dict

      Convert class attributes to json-compatible dict.

      Returns:
          A dictionary with class attributes as keys



