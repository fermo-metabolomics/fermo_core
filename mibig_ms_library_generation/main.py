"""Main entry point to the MIBiG spectral library preparation

Copyright (c) 2022 to present Mitja M. Zdouc, PhD and individual contributors.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""
from typing import Self
from sys import argv

from pydantic import BaseModel

from data_processing.class_cfmid_manager import CfmidManager
from data_processing.class_preprocessing_manager import PreprocessingManager
from data_processing.class_postprocessing_manager import PostprocessingManager
from data_processing.class_parsing_manager import ParsingManager


class LibraryPrep(BaseModel):
    """Class that manages the other MIBiG spectral library classes.

    Attributes:
        mibig_folder: Path of the mibig.json folder containing .json files.
        prepped_cfmid_file: Path of output file containing metabolite name, SMILES.
        prepped_metadata_file: Path of output file containing metabolite name, SMILES, chemical formula,
        molecular mass, database IDs, MIBiG entry ID.
        output_folder: Path of cfm-id output folder where it will create 1 fragmentation spectrum file per
        metabolite.
        prune_probability: Probability below which metabolite fragments will be excluded from predictions.
        mgf_file: Path of the .mgf file spectral library generated by this pipeline

    Raise:
        pydantic.ValidationError: Pydantic validation failed during instantiation.
    """

    mibig_folder: str = ""
    prepped_cfmid_file: str = ""
    prepped_metadata_file: str = ""
    output_folder: str = ""
    prune_probability: str = ""
    mgf_file: str = ""

    def process_mibig(self: Self):
        """Processes the .json files from MIBiG into input for CFM-ID and metadata file."""
        print("Processing the .json files from MIBiG into input for CFM-ID")
        args_dict = {
            "mibig_folder": self.mibig_folder,
            "prepped_cfmid_file": self.prepped_cfmid_file,
            "prepped_metadata_file": self.prepped_metadata_file,
        }
        preprocessed_data = PreprocessingManager(**args_dict)
        preprocessed_data.extract_filenames()
        for file_path in preprocessed_data.bgc_files:
            preprocessed_data.extract_metadata(file_path)
        preprocessed_data.write_outfiles()

    def run_cfmid(self: Self):
        """Builds and executes the command to run CFM-ID in dockerized environment using nice -16"""
        args_dict = {
            "prepped_cfmid_file": self.prepped_cfmid_file,
            "output_folder": self.output_folder,
            "prune_probability": self.prune_probability,
        }
        spectra = CfmidManager(**args_dict)
        spectra.run_program()

    def run_metadata(self: Self):
        """Adds real mass, publication IDs and MIBiG cluster IDs to CFM-ID output."""
        print("Adding metadata to the CFM-ID output")
        args_dict = {
            "output_folder": self.output_folder,
            "prepped_metadata_file": self.prepped_metadata_file,
            "mgf_file": self.mgf_file,
        }
        metadata = PostprocessingManager(**args_dict)
        metadata.extract_filenames()
        metadata.extract_metadata()
        metadata.add_metadata_cfmid_files()
        metadata.cleanup_log_dict()
        metadata.write_mgf_to_file()

    @staticmethod
    def run_library_prep(mode):
        if mode == "preprocessing":
            data.process_mibig()
        if mode == "cfm_id":
            data.run_cfmid()
        if mode == "metadata":
            data.run_metadata()
        if mode == "all_cfm_id":
            data.process_mibig()
            data.run_cfmid()
            data.run_metadata()


if __name__ == "__main__":
    arguments_dictionary, mode_operation = ParsingManager.run_parser(argv[1:])
    data = LibraryPrep(**arguments_dictionary)
    data.run_library_prep(mode_operation)
    print("All actions completed successfully!")
